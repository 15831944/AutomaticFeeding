<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUb2gAFHdgABh7YAAUd
        2AADHtcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRzZCAUd
        2HMFHthwBBvbFQoe2gACHdsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAFG9kZBh7Y5QYe2PoGHti8BR7YUgEd2wsGHtgABh7YAAYe2AAGHtgABh7YAAYe2AAFHtgABR3XAAQd
        2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAUa2BsGHtjoBh7Y9gYe2PQGHtjvBR7YnQUd2FEFHthZBh3XdAYd2HwFHdhvBR3YWQQd
        2SoFHdcOGTTeAAUd2QAAE+EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AD/+AAB//4AB///gB/////////////////8=
</value>
  </data>
</root>