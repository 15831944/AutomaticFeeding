<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        x///48f//+PH///jx///48f//+AH///gB/8=
</value>
  </data>
</root>